Migrate a Spring Data JPA project to Spring Data JDBC

Outline

* Why do you want to do it?
* General strategy: Baby Steps
Every step is an improvement.
You can revert the current (incomplete) step at will, without loosing much money or time
* General requirement: You have good tests
* Required Understanding: What is an aggregate.

* Identify proper Aggregates, doesn't have to be complete
: Foreach JPA aggregate
  * Pick one Aggregate. Fewer connections to other aggregates is better
  * make sure `save` is properly called.
  : ForEach connection
    * Disable cascading when it crosses Aggregate boundaries.
    * Ensure cascading is present and only a single Repository is used for entities in single aggregates.
    * Break connections (both directions). This will trigger failures when relying on cascading.
      * Bidirectional relationships become one directional, backreference replaced by lookup (between aggregates) or aggregate logic (internal to aggregate)
      * References to other aggregates become ids.
      * M:N Relationships: Who owns the relationship table? Make that table explicit. Adjust references and cascading accordingly
  : endForEach connection
  * extract validation (Validation is not the job of an ORM, ideally entities are always valid)
  * remove redundant reads
: endForEach JPA aggregates

* Setup Spring Data JDBC to connect to the same database

: ForEach aggregate
  // convert to JDBC aggregate
  * Id generation
  * mapping of columns (possibly write custom converters and migrate to dedicated types)
  * Translate events

: endForEach aggregates

Notes:
Example domain: Warehouse: Location, Product, Order, Package, Shipment, Customer

TODO:
- create JPA model
  x cascading
  x sub aggregate Repository
  x bidirectional between Aggregates
  x bidirectional within Aggregate
  x M:N Relationship
  - extract validation
  - redundant reads
- create service with antipatterns
  - misusing cascade
  - use subaggregate Repository
  
